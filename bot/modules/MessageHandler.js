const QuizService = require('./QuizService');

async function handleUpdateAsync(bot, update) {
  if (update.message && update.message.text) {
    const chatId = update.message.chat.id;
    const messageText = update.message.text.trim().toLowerCase();

    switch (messageText) {
      case '/start':
        await bot.sendMessage(chatId, 'üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:', getInlineMainMenu());
        break;

      case '–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É':
      case '/quiz':
        await QuizService.startQuiz(bot, chatId);
        break;

      case '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
      case '/view_stats':
        const allTimeScore = QuizService.getAllTimeScore(chatId);
        await sendStats(bot, chatId, allTimeScore);
        break;

      case '–ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã':
        await sendRules(bot, chatId);
        break;

      case 'stop':
        await stopGame(bot, chatId);
        break;

      default:
        const correctAnswer = QuizService.getCorrectAnswer(chatId);
        if (correctAnswer) {
          if (messageText === correctAnswer.toLowerCase()) {
            QuizService.updateScore(chatId, true);
            await bot.sendMessage(chatId, '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!');
          } else {
            QuizService.updateScore(chatId, false);
            await bot.sendMessage(chatId, `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}`);
          }
          await QuizService.startQuiz(bot, chatId);
        } else {
          await bot.sendMessage(chatId, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.');
        }
        break;
    }
  } else if (update.callback_query) {
    await handleCallbackQuery(bot, update.callback_query);
  }
}

function getInlineMainMenu() {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data: 'start_game' }],
        [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'view_stats' }],
        [{ text: 'üìú –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã', callback_data: 'rules' }],
        [{ text: '‚èπ –°—Ç–æ–ø', callback_data: 'stop_game' }]
      ],
    },
  };
}

async function handleCallbackQuery(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;

  switch (callbackQuery.data) {
    case 'start_game':
      await QuizService.startQuiz(bot, chatId);
      break;

    case 'view_stats':
      const stats = QuizService.getAllTimeScore(chatId);
      await sendStats(bot, chatId, stats);
      break;

    case 'rules':
      await sendRules(bot, chatId);
      break;

    case 'stop_game':
      await stopGame(bot, chatId);
      break;
  }

  await bot.answerCallbackQuery(callbackQuery.id); // —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
}

async function sendStats(bot, chatId, stats) {
  await bot.sendMessage(
    chatId,
    `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n` +
    `‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: *${stats.correct}*\n` +
    `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: *${stats.wrong}*\n` +
    `üìå –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: *${stats.totalQuestions}*\n` +
    `üïí –í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: *${stats.timeSpent.toFixed(2)}* –º–∏–Ω—É—Ç`,
    { parse_mode: 'Markdown' }
  );
}

async function sendRules(bot, chatId) {
  await bot.sendMessage(
    chatId,
    'üìú *–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:*\n\n' +
    '1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.\n' +
    '2Ô∏è‚É£ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—á–∫–∏.\n' +
    '3Ô∏è‚É£ /start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.',
    { parse_mode: 'Markdown' }
  );
}

async function stopGame(bot, chatId) {
  QuizService.stopQuiz(chatId);
  const finalStats = QuizService.getAllTimeScore(chatId);
  await bot.sendMessage(chatId, '‚èπ *–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*', { parse_mode: 'Markdown' });
  await sendStats(bot, chatId, finalStats);
}

async function handleErrorAsync(bot, error) {
  console.error('–û—à–∏–±–∫–∞:', error.message);
}

module.exports = { handleUpdateAsync, handleErrorAsync };
